// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	CountPullRequests(ctx context.Context, arg CountPullRequestsParams) (int32, error)
	CountPullRequestsWithJiraReferences(ctx context.Context, arg CountPullRequestsWithJiraReferencesParams) (int64, error)
	// Repositories --
	CountRepositories(ctx context.Context, dollar_1 string) (int64, error)
	// Team Statistics --
	CountTeamCommitsByDateRange(ctx context.Context, arg CountTeamCommitsByDateRangeParams) (int32, error)
	CreateRepository(ctx context.Context, arg CreateRepositoryParams) error
	CreateTeamMember(ctx context.Context, arg CreateTeamMemberParams) error
	// Users --
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	// Filter by selected members
	// FirstReviewPerPR AS ( -- No longer needed
	//     SELECT
	//         pull_request_id,
	//         MIN(submitted_at) as first_review_at
	//     FROM pull_request_reviews
	//     WHERE state = 'APPROVED' OR state = 'CHANGES_REQUESTED'
	//     GROUP BY pull_request_id
	// ) -- No longer needed
	// LEFT JOIN FirstReviewPerPR fr ON p.id = fr.pull_request_id -- No longer needed
	DiagnoseLeadTimes(ctx context.Context) ([]DiagnoseLeadTimesRow, error)
	FetchSecurityPullRequests(ctx context.Context) ([]FetchSecurityPullRequestsRow, error)
	GetAllRepositories(ctx context.Context) ([]Repository, error)
	// Pull Requests (prs) --
	GetLastPullRequestMergedDate(ctx context.Context, arg GetLastPullRequestMergedDateParams) (pgtype.Timestamptz, error)
	GetPullRequestTimeDataForStats(ctx context.Context, arg GetPullRequestTimeDataForStatsParams) ([]GetPullRequestTimeDataForStatsRow, error)
	GetTeamMemberReviewStatsByDateRange(ctx context.Context, arg GetTeamMemberReviewStatsByDateRangeParams) ([]GetTeamMemberReviewStatsByDateRangeRow, error)
	GetTeamMembers(ctx context.Context, team string) ([]GetTeamMembersRow, error)
	// Filter by PR merge date
	GetTeamPullRequestStatsByDateRange(ctx context.Context, arg GetTeamPullRequestStatsByDateRangeParams) (GetTeamPullRequestStatsByDateRangeRow, error)
	GetUserByUsername(ctx context.Context, username string) (User, error)
	// Commits --
	InsertCommit(ctx context.Context, arg InsertCommitParams) error
	// List Pull Requests (Paginated & Searchable by Title/Author and optionally Team) --
	ListPullRequests(ctx context.Context, arg ListPullRequestsParams) ([]ListPullRequestsRow, error)
	// Pull Request JIRA References --
	ListPullRequestsWithJiraReferences(ctx context.Context, arg ListPullRequestsWithJiraReferencesParams) ([]ListPullRequestsWithJiraReferencesRow, error)
	ListPullRequestsWithoutJiraReferences(ctx context.Context, arg ListPullRequestsWithoutJiraReferencesParams) ([]ListPullRequestsWithoutJiraReferencesRow, error)
	// Use ILIKE for case-insensitive search, handle empty search string
	ListRepositories(ctx context.Context, arg ListRepositoriesParams) ([]Repository, error)
	SearchDistinctTeamNamesByPrefix(ctx context.Context, dollar_1 sql.NullString) ([]string, error)
	TruncateRepositories(ctx context.Context) error
	// Teams --
	TruncateTeams(ctx context.Context) error
	UpsertPullRequest(ctx context.Context, arg UpsertPullRequestParams) error
	// Pull Request Reviews --
	UpsertPullRequestReview(ctx context.Context, arg UpsertPullRequestReviewParams) error
}

var _ Querier = (*Queries)(nil)
