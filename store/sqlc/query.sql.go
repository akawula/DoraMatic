// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPullRequests = `-- name: CountPullRequests :one
SELECT COUNT(p.*)::int -- Count distinct PRs
FROM prs p
LEFT JOIN teams t ON p.author = t.member -- Join with teams table
WHERE
    p.state = 'MERGED' -- Only count merged PRs when filtering by merged_at
    AND p.merged_at >= $1::timestamptz
    AND p.merged_at <= $2::timestamptz
    AND ( -- Filter by search term (title or author)
        $3::text = '' OR
        p.title ILIKE '%' || $3::text || '%' OR
        p.author ILIKE '%' || $3::text || '%'
    )
    AND ( -- Optionally filter by team name
        $4::text = '' OR
        t.team = $4::text
    )
    AND ( -- Optionally filter by state
        $5::text = '' OR
        p.state = $5::text
    )
    AND ( -- Optionally filter by author (case-insensitive)
        $6::text = '' OR
        p.author ILIKE '%' || $6::text || '%'
    )
    AND ($7::text[] IS NULL OR p.author = ANY($7::text[]))
`

type CountPullRequestsParams struct {
	StartDate    time.Time `db:"start_date"`
	EndDate      time.Time `db:"end_date"`
	SearchTerm   string    `db:"search_term"`
	TeamName     string    `db:"team_name"`
	FilterState  string    `db:"filter_state"`
	FilterAuthor string    `db:"filter_author"`
	Members      []string  `db:"members"`
}

func (q *Queries) CountPullRequests(ctx context.Context, arg CountPullRequestsParams) (int32, error) {
	row := q.db.QueryRow(ctx, countPullRequests,
		arg.StartDate,
		arg.EndDate,
		arg.SearchTerm,
		arg.TeamName,
		arg.FilterState,
		arg.FilterAuthor,
		arg.Members,
	)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countRepositories = `-- name: CountRepositories :one

SELECT count(*) FROM repositories
WHERE ($1::text = '' OR slug ILIKE '%' || $1 || '%')
`

// Repositories --
func (q *Queries) CountRepositories(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, countRepositories, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTeamCommitsByDateRange = `-- name: CountTeamCommitsByDateRange :one

SELECT COUNT(c.id)::int -- Cast to int for Go compatibility
FROM commits c
JOIN prs p ON c.pr_id = p.id
JOIN teams t ON p.author = t.member
WHERE t.team = $1
  AND ($2::text[] IS NULL OR p.author = ANY($2::text[])) -- Filter by selected members
  AND p.state = 'MERGED'       -- Only consider PRs that are merged
  AND p.merged_at >= $3::timestamptz      -- Filter by PR merge date
  AND p.merged_at <= $4::timestamptz
`

type CountTeamCommitsByDateRangeParams struct {
	TeamName          string    `db:"team_name"`
	Members           []string  `db:"members"`
	MergedAtStartDate time.Time `db:"merged_at_start_date"`
	MergedAtEndDate   time.Time `db:"merged_at_end_date"`
}

// Team Statistics --
func (q *Queries) CountTeamCommitsByDateRange(ctx context.Context, arg CountTeamCommitsByDateRangeParams) (int32, error) {
	row := q.db.QueryRow(ctx, countTeamCommitsByDateRange,
		arg.TeamName,
		arg.Members,
		arg.MergedAtStartDate,
		arg.MergedAtEndDate,
	)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const createRepository = `-- name: CreateRepository :exec
INSERT INTO repositories (org, slug, language)
VALUES ($1, $2, $3)
`

type CreateRepositoryParams struct {
	Org      string      `db:"org"`
	Slug     string      `db:"slug"`
	Language pgtype.Text `db:"language"`
}

func (q *Queries) CreateRepository(ctx context.Context, arg CreateRepositoryParams) error {
	_, err := q.db.Exec(ctx, createRepository, arg.Org, arg.Slug, arg.Language)
	return err
}

const createTeamMember = `-- name: CreateTeamMember :exec
INSERT INTO teams (team, member, avatar_url)
VALUES ($1, $2, $3)
`

type CreateTeamMemberParams struct {
	Team      string         `db:"team"`
	Member    string         `db:"member"`
	AvatarUrl sql.NullString `db:"avatar_url"`
}

func (q *Queries) CreateTeamMember(ctx context.Context, arg CreateTeamMemberParams) error {
	_, err := q.db.Exec(ctx, createTeamMember, arg.Team, arg.Member, arg.AvatarUrl)
	return err
}

const diagnoseLeadTimes = `-- name: DiagnoseLeadTimes :many

WITH FirstCommitPerPR AS (
    SELECT
        pr_id,
        MIN(created_at) as first_commit_at
    FROM commits
    GROUP BY pr_id
)
SELECT
    p.id AS pr_id,
    p.created_at AS pr_created_at,
    p.review_requested_at AS pr_review_requested_at, -- This is the field to use
    p.merged_at AS pr_merged_at,
    fc.first_commit_at,
    p.review_requested_at AS first_review_at -- Use p.review_requested_at directly
FROM prs p
LEFT JOIN FirstCommitPerPR fc ON p.id = fc.pr_id
WHERE p.state = 'MERGED'
ORDER BY p.merged_at DESC
LIMIT 10
`

type DiagnoseLeadTimesRow struct {
	PrID                string             `db:"pr_id"`
	PrCreatedAt         time.Time          `db:"pr_created_at"`
	PrReviewRequestedAt pgtype.Timestamptz `db:"pr_review_requested_at"`
	PrMergedAt          pgtype.Timestamptz `db:"pr_merged_at"`
	FirstCommitAt       interface{}        `db:"first_commit_at"`
	FirstReviewAt       pgtype.Timestamptz `db:"first_review_at"`
}

// Filter by selected members
// FirstReviewPerPR AS ( -- No longer needed
//
//	SELECT
//	    pull_request_id,
//	    MIN(submitted_at) as first_review_at
//	FROM pull_request_reviews
//	WHERE state = 'APPROVED' OR state = 'CHANGES_REQUESTED'
//	GROUP BY pull_request_id
//
// ) -- No longer needed
// LEFT JOIN FirstReviewPerPR fr ON p.id = fr.pull_request_id -- No longer needed
func (q *Queries) DiagnoseLeadTimes(ctx context.Context) ([]DiagnoseLeadTimesRow, error) {
	rows, err := q.db.Query(ctx, diagnoseLeadTimes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiagnoseLeadTimesRow{}
	for rows.Next() {
		var i DiagnoseLeadTimesRow
		if err := rows.Scan(
			&i.PrID,
			&i.PrCreatedAt,
			&i.PrReviewRequestedAt,
			&i.PrMergedAt,
			&i.FirstCommitAt,
			&i.FirstReviewAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchSecurityPullRequests = `-- name: FetchSecurityPullRequests :many
SELECT
    p.id, p.url, p.title, p.repository_name, p.repository_owner, p.author,
    p.additions, p.deletions, p.state, p.created_at, p.merged_at
FROM teams t
INNER JOIN prs p ON p.author = t.member
WHERE
    (p.created_at >= date_trunc('day', current_timestamp) - interval '1 day' AND p.state = 'OPEN')
    OR
    (p.merged_at >= date_trunc('day', current_timestamp) - interval '1 day' AND p.state = 'MERGED')
AND t.team IN (
    'pe-customer-journey', 'PE Platform Insights', 'Webstack', 'Omnibus', 'CSI',
    'pe-platform-fleet', 'ie-deploy', 'P&E - Team Domino', 'Ares', 'RD-Edge',
    'Golden', 'RD - Production Engineering', 'Security Engineering'
)
GROUP BY p.id
ORDER BY p.additions + p.deletions DESC
`

type FetchSecurityPullRequestsRow struct {
	ID              string             `db:"id"`
	Url             sql.NullString     `db:"url"`
	Title           sql.NullString     `db:"title"`
	RepositoryName  pgtype.Text        `db:"repository_name"`
	RepositoryOwner pgtype.Text        `db:"repository_owner"`
	Author          pgtype.Text        `db:"author"`
	Additions       pgtype.Int4        `db:"additions"`
	Deletions       pgtype.Int4        `db:"deletions"`
	State           pgtype.Text        `db:"state"`
	CreatedAt       time.Time          `db:"created_at"`
	MergedAt        pgtype.Timestamptz `db:"merged_at"`
}

func (q *Queries) FetchSecurityPullRequests(ctx context.Context) ([]FetchSecurityPullRequestsRow, error) {
	rows, err := q.db.Query(ctx, fetchSecurityPullRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchSecurityPullRequestsRow{}
	for rows.Next() {
		var i FetchSecurityPullRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.RepositoryName,
			&i.RepositoryOwner,
			&i.Author,
			&i.Additions,
			&i.Deletions,
			&i.State,
			&i.CreatedAt,
			&i.MergedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRepositories = `-- name: GetAllRepositories :many
SELECT org, slug, language FROM repositories
`

func (q *Queries) GetAllRepositories(ctx context.Context) ([]Repository, error) {
	rows, err := q.db.Query(ctx, getAllRepositories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repository{}
	for rows.Next() {
		var i Repository
		if err := rows.Scan(&i.Org, &i.Slug, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastPullRequestMergedDate = `-- name: GetLastPullRequestMergedDate :one

SELECT merged_at FROM prs
WHERE state = $1 AND repository_owner = $2 AND repository_name = $3
ORDER BY merged_at DESC
LIMIT 1
`

type GetLastPullRequestMergedDateParams struct {
	State           pgtype.Text `db:"state"`
	RepositoryOwner pgtype.Text `db:"repository_owner"`
	RepositoryName  pgtype.Text `db:"repository_name"`
}

// Pull Requests (prs) --
func (q *Queries) GetLastPullRequestMergedDate(ctx context.Context, arg GetLastPullRequestMergedDateParams) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getLastPullRequestMergedDate, arg.State, arg.RepositoryOwner, arg.RepositoryName)
	var merged_at pgtype.Timestamptz
	err := row.Scan(&merged_at)
	return merged_at, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT member, avatar_url
FROM teams
WHERE team = $1
ORDER BY member
`

type GetTeamMembersRow struct {
	Member    string         `db:"member"`
	AvatarUrl sql.NullString `db:"avatar_url"`
}

func (q *Queries) GetTeamMembers(ctx context.Context, team string) ([]GetTeamMembersRow, error) {
	rows, err := q.db.Query(ctx, getTeamMembers, team)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTeamMembersRow{}
	for rows.Next() {
		var i GetTeamMembersRow
		if err := rows.Scan(&i.Member, &i.AvatarUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamPullRequestStatsByDateRange = `-- name: GetTeamPullRequestStatsByDateRange :one

WITH FirstCommitPerPR AS (
    SELECT
        pr_id,
        MIN(created_at) as first_commit_at
    FROM commits
    GROUP BY pr_id
)
SELECT
    COUNT(CASE WHEN p.state = 'MERGED' AND p.merged_at >= $1::timestamptz AND p.merged_at <= $2::timestamptz THEN 1 END)::int AS merged_count,
    COUNT(CASE WHEN p.state = 'CLOSED' AND p.created_at >= $1::timestamptz AND p.created_at <= $2::timestamptz THEN 1 END)::int AS closed_count,
    COUNT(CASE WHEN p.state = 'MERGED' AND p.merged_at >= $1::timestamptz AND p.merged_at <= $2::timestamptz AND p.title LIKE 'Revert %' THEN 1 END)::int AS rollbacks_count,
    -- Calculate average lead time to first review request in seconds
    COALESCE(AVG(
        CASE
            -- Only include PRs that have both timestamps and review requested after first commit
            WHEN p.review_requested_at IS NOT NULL AND fc.first_commit_at IS NOT NULL AND p.review_requested_at > fc.first_commit_at
            THEN EXTRACT(EPOCH FROM (p.review_requested_at - fc.first_commit_at))
            ELSE NULL
        END
    ), 0)::float AS avg_lead_time_to_code_seconds, -- Use COALESCE to return 0 if no valid PRs found, cast to float
    -- Count PRs contributing to the average lead time calculation
    COUNT(
        CASE
            WHEN p.review_requested_at IS NOT NULL AND fc.first_commit_at IS NOT NULL AND p.review_requested_at > fc.first_commit_at
            THEN 1 -- Count this PR
            ELSE NULL
        END
    )::int AS count_prs_for_avg_lead_time,
    -- Calculate average lead time from first review to merge in seconds
    COALESCE(AVG(
        CASE
            -- Only include PRs that are merged, have a first review, and the review happened before merge
            WHEN p.state = 'MERGED' AND p.merged_at IS NOT NULL AND p.review_requested_at IS NOT NULL AND p.review_requested_at < p.merged_at
            THEN EXTRACT(EPOCH FROM (p.merged_at - p.review_requested_at))
            ELSE NULL
        END
    ), 0)::float AS avg_lead_time_to_review_seconds,
    -- Calculate average lead time from first commit to merge in seconds
    COALESCE(AVG(
        CASE
            -- Only include PRs that are merged, have a first commit, and the commit happened before merge
            WHEN p.state = 'MERGED' AND p.merged_at IS NOT NULL AND fc.first_commit_at IS NOT NULL AND fc.first_commit_at < p.merged_at
            THEN EXTRACT(EPOCH FROM (p.merged_at - fc.first_commit_at))
            ELSE NULL
        END
    ), 0)::float AS avg_lead_time_to_merge_seconds,
    -- Count PRs contributing to the average lead time to merge calculation
    COUNT(
        CASE
            WHEN p.state = 'MERGED' AND p.merged_at IS NOT NULL AND fc.first_commit_at IS NOT NULL AND fc.first_commit_at < p.merged_at
            THEN 1 -- Count this PR
            ELSE NULL
        END
    )::int AS count_prs_for_avg_lead_time_to_merge,
    COALESCE(SUM(CASE WHEN p.state = 'MERGED' AND p.merged_at >= $1::timestamptz AND p.merged_at <= $2::timestamptz THEN p.additions ELSE 0 END), 0)::bigint AS total_additions,
    COALESCE(SUM(CASE WHEN p.state = 'MERGED' AND p.merged_at >= $1::timestamptz AND p.merged_at <= $2::timestamptz THEN p.deletions ELSE 0 END), 0)::bigint AS total_deletions
FROM prs p
JOIN teams t ON p.author = t.member
LEFT JOIN FirstCommitPerPR fc ON p.id = fc.pr_id
WHERE t.team = $3
  AND ($4::text[] IS NULL OR p.author = ANY($4::text[])) -- Filter by selected members
  AND (
       (p.state = 'MERGED' AND p.merged_at >= $1::timestamptz AND p.merged_at <= $2::timestamptz) OR
       (p.state = 'CLOSED' AND p.created_at >= $1::timestamptz AND p.created_at <= $2::timestamptz)
      )
`

type GetTeamPullRequestStatsByDateRangeParams struct {
	StartDate time.Time `db:"start_date"`
	EndDate   time.Time `db:"end_date"`
	TeamName  string    `db:"team_name"`
	Members   []string  `db:"members"`
}

type GetTeamPullRequestStatsByDateRangeRow struct {
	MergedCount                   int32   `db:"merged_count"`
	ClosedCount                   int32   `db:"closed_count"`
	RollbacksCount                int32   `db:"rollbacks_count"`
	AvgLeadTimeToCodeSeconds      float64 `db:"avg_lead_time_to_code_seconds"`
	CountPrsForAvgLeadTime        int32   `db:"count_prs_for_avg_lead_time"`
	AvgLeadTimeToReviewSeconds    float64 `db:"avg_lead_time_to_review_seconds"`
	AvgLeadTimeToMergeSeconds     float64 `db:"avg_lead_time_to_merge_seconds"`
	CountPrsForAvgLeadTimeToMerge int32   `db:"count_prs_for_avg_lead_time_to_merge"`
	TotalAdditions                int64   `db:"total_additions"`
	TotalDeletions                int64   `db:"total_deletions"`
}

// Filter by PR merge date
// LEFT JOIN FirstReviewPerPR fr ON p.id = fr.pull_request_id -- Join with first review data -- No longer needed
func (q *Queries) GetTeamPullRequestStatsByDateRange(ctx context.Context, arg GetTeamPullRequestStatsByDateRangeParams) (GetTeamPullRequestStatsByDateRangeRow, error) {
	row := q.db.QueryRow(ctx, getTeamPullRequestStatsByDateRange,
		arg.StartDate,
		arg.EndDate,
		arg.TeamName,
		arg.Members,
	)
	var i GetTeamPullRequestStatsByDateRangeRow
	err := row.Scan(
		&i.MergedCount,
		&i.ClosedCount,
		&i.RollbacksCount,
		&i.AvgLeadTimeToCodeSeconds,
		&i.CountPrsForAvgLeadTime,
		&i.AvgLeadTimeToReviewSeconds,
		&i.AvgLeadTimeToMergeSeconds,
		&i.CountPrsForAvgLeadTimeToMerge,
		&i.TotalAdditions,
		&i.TotalDeletions,
	)
	return i, err
}

const insertCommit = `-- name: InsertCommit :exec

INSERT INTO commits (id, pr_id, message, created_at)
VALUES ($1, $2, $3, $4)
ON CONFLICT (id) DO NOTHING
`

type InsertCommitParams struct {
	ID        string             `db:"id"`
	PrID      string             `db:"pr_id"`
	Message   sql.NullString     `db:"message"`
	CreatedAt pgtype.Timestamptz `db:"created_at"`
}

// Commits --
func (q *Queries) InsertCommit(ctx context.Context, arg InsertCommitParams) error {
	_, err := q.db.Exec(ctx, insertCommit,
		arg.ID,
		arg.PrID,
		arg.Message,
		arg.CreatedAt,
	)
	return err
}

const listPullRequests = `-- name: ListPullRequests :many

WITH FirstCommitPerPR AS (
    SELECT
        pr_id,
        MIN(created_at) as first_commit_at
    FROM commits
    GROUP BY pr_id
),
PRsWithLeadTimes AS (
    SELECT
        p.id,
        p.repository_name,
        p.title,
        p.author,
        p.state,
        p.created_at,
        p.merged_at,
        p.additions,
        p.deletions,
        p.url,
        p.review_requested_at, -- Needed for calculation
        fc.first_commit_at,    -- From CTE
        CASE
            WHEN p.review_requested_at IS NOT NULL AND fc.first_commit_at IS NOT NULL AND p.review_requested_at > fc.first_commit_at
            THEN (EXTRACT(EPOCH FROM p.review_requested_at) - EXTRACT(EPOCH FROM fc.first_commit_at))
            ELSE 0.0 -- Changed from NULL
        END::DOUBLE PRECISION AS lead_time_to_code_seconds,
        CASE
            WHEN p.merged_at IS NOT NULL AND p.review_requested_at IS NOT NULL AND p.review_requested_at < p.merged_at
            THEN (EXTRACT(EPOCH FROM p.merged_at) - EXTRACT(EPOCH FROM p.review_requested_at))
            ELSE 0.0 -- Changed from NULL
        END::DOUBLE PRECISION AS lead_time_to_review_seconds,
        CASE
            WHEN p.merged_at IS NOT NULL AND fc.first_commit_at IS NOT NULL AND fc.first_commit_at < p.merged_at
            THEN EXTRACT(EPOCH FROM (p.merged_at - fc.first_commit_at))
            ELSE 0.0 -- Changed from NULL
        END::DOUBLE PRECISION AS lead_time_to_merge_seconds
    FROM prs p
    LEFT JOIN FirstCommitPerPR fc ON p.id = fc.pr_id
    -- LEFT JOIN FirstReviewPerPR fr ON p.id = fr.pull_request_id -- No longer needed
)
SELECT
    pr_lt.id,
    pr_lt.repository_name,
    pr_lt.title,
    pr_lt.author,
    pr_lt.state,
    pr_lt.created_at,
    pr_lt.merged_at,
    pr_lt.additions,
    pr_lt.deletions,
    pr_lt.url,
    pr_lt.lead_time_to_code_seconds,
    pr_lt.lead_time_to_review_seconds,
    pr_lt.lead_time_to_merge_seconds
FROM PRsWithLeadTimes pr_lt
LEFT JOIN teams t ON pr_lt.author = t.member -- Join with teams table for filtering
WHERE
    pr_lt.state = 'MERGED' -- Only show merged PRs when filtering by merged_at
    AND pr_lt.merged_at >= $1::timestamptz
    AND pr_lt.merged_at <= $2::timestamptz
    AND ( -- Filter by search term (title or author)
        $3::text = '' OR
        pr_lt.title ILIKE '%' || $3::text || '%' OR
        pr_lt.author ILIKE '%' || $3::text || '%'
    )
    AND ( -- Optionally filter by team name
        $4::text = '' OR
        t.team = $4::text
    )
    AND ( -- Optionally filter by state
        $5::text = '' OR
        pr_lt.state ILIKE '%' || $5::text || '%' -- Use ILIKE for state as well for consistency, though direct equals is fine if state is exact
    )
    AND ( -- Optionally filter by author (case-insensitive)
        $6::text = '' OR
        pr_lt.author ILIKE '%' || $6::text || '%'
    )
    AND ($7::text[] IS NULL OR pr_lt.author = ANY($7::text[])) -- Filter by selected members
ORDER BY pr_lt.merged_at DESC -- Default sort by merged_at
LIMIT $9::int
OFFSET $8::int
`

type ListPullRequestsParams struct {
	StartDate    time.Time `db:"start_date"`
	EndDate      time.Time `db:"end_date"`
	SearchTerm   string    `db:"search_term"`
	TeamName     string    `db:"team_name"`
	FilterState  string    `db:"filter_state"`
	FilterAuthor string    `db:"filter_author"`
	Members      []string  `db:"members"`
	OffsetVal    int32     `db:"offset_val"`
	PageSize     int32     `db:"page_size"`
}

type ListPullRequestsRow struct {
	ID                      string             `db:"id"`
	RepositoryName          pgtype.Text        `db:"repository_name"`
	Title                   sql.NullString     `db:"title"`
	Author                  pgtype.Text        `db:"author"`
	State                   pgtype.Text        `db:"state"`
	CreatedAt               time.Time          `db:"created_at"`
	MergedAt                pgtype.Timestamptz `db:"merged_at"`
	Additions               pgtype.Int4        `db:"additions"`
	Deletions               pgtype.Int4        `db:"deletions"`
	Url                     sql.NullString     `db:"url"`
	LeadTimeToCodeSeconds   float64            `db:"lead_time_to_code_seconds"`
	LeadTimeToReviewSeconds float64            `db:"lead_time_to_review_seconds"`
	LeadTimeToMergeSeconds  float64            `db:"lead_time_to_merge_seconds"`
}

// List Pull Requests (Paginated & Searchable by Title/Author and optionally Team) --
func (q *Queries) ListPullRequests(ctx context.Context, arg ListPullRequestsParams) ([]ListPullRequestsRow, error) {
	rows, err := q.db.Query(ctx, listPullRequests,
		arg.StartDate,
		arg.EndDate,
		arg.SearchTerm,
		arg.TeamName,
		arg.FilterState,
		arg.FilterAuthor,
		arg.Members,
		arg.OffsetVal,
		arg.PageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPullRequestsRow{}
	for rows.Next() {
		var i ListPullRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.RepositoryName,
			&i.Title,
			&i.Author,
			&i.State,
			&i.CreatedAt,
			&i.MergedAt,
			&i.Additions,
			&i.Deletions,
			&i.Url,
			&i.LeadTimeToCodeSeconds,
			&i.LeadTimeToReviewSeconds,
			&i.LeadTimeToMergeSeconds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepositories = `-- name: ListRepositories :many

SELECT org, slug, language FROM repositories
WHERE ($1::text = '' OR slug ILIKE '%' || $1 || '%')
LIMIT $2 OFFSET $3
`

type ListRepositoriesParams struct {
	Column1 string `db:"column_1"`
	Limit   int32  `db:"limit"`
	Offset  int32  `db:"offset"`
}

// Use ILIKE for case-insensitive search, handle empty search string
func (q *Queries) ListRepositories(ctx context.Context, arg ListRepositoriesParams) ([]Repository, error) {
	rows, err := q.db.Query(ctx, listRepositories, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Repository{}
	for rows.Next() {
		var i Repository
		if err := rows.Scan(&i.Org, &i.Slug, &i.Language); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchDistinctTeamNamesByPrefix = `-- name: SearchDistinctTeamNamesByPrefix :many
SELECT DISTINCT team
FROM teams
WHERE team ILIKE $1 || '%' -- Case-insensitive prefix search
ORDER BY team
`

func (q *Queries) SearchDistinctTeamNamesByPrefix(ctx context.Context, dollar_1 sql.NullString) ([]string, error) {
	rows, err := q.db.Query(ctx, searchDistinctTeamNamesByPrefix, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var team string
		if err := rows.Scan(&team); err != nil {
			return nil, err
		}
		items = append(items, team)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateRepositories = `-- name: TruncateRepositories :exec
TRUNCATE TABLE repositories
`

func (q *Queries) TruncateRepositories(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateRepositories)
	return err
}

const truncateTeams = `-- name: TruncateTeams :exec

TRUNCATE TABLE teams
`

// Teams --
func (q *Queries) TruncateTeams(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateTeams)
	return err
}

const upsertPullRequest = `-- name: UpsertPullRequest :exec
INSERT INTO prs (
    id, title, state, url, merged_at, created_at, additions, deletions,
    branch_name, author, repository_name, repository_owner,
    review_requested_at, reviews_requested
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) ON CONFLICT (id)
DO UPDATE SET
    title = EXCLUDED.title,
    state = EXCLUDED.state,
    merged_at = EXCLUDED.merged_at,
    additions = EXCLUDED.additions,
    deletions = EXCLUDED.deletions,
    review_requested_at = EXCLUDED.review_requested_at,
    reviews_requested = EXCLUDED.reviews_requested
`

type UpsertPullRequestParams struct {
	ID                string             `db:"id"`
	Title             sql.NullString     `db:"title"`
	State             pgtype.Text        `db:"state"`
	Url               sql.NullString     `db:"url"`
	MergedAt          pgtype.Timestamptz `db:"merged_at"`
	CreatedAt         time.Time          `db:"created_at"`
	Additions         pgtype.Int4        `db:"additions"`
	Deletions         pgtype.Int4        `db:"deletions"`
	BranchName        sql.NullString     `db:"branch_name"`
	Author            pgtype.Text        `db:"author"`
	RepositoryName    pgtype.Text        `db:"repository_name"`
	RepositoryOwner   pgtype.Text        `db:"repository_owner"`
	ReviewRequestedAt pgtype.Timestamptz `db:"review_requested_at"`
	ReviewsRequested  pgtype.Int4        `db:"reviews_requested"`
}

func (q *Queries) UpsertPullRequest(ctx context.Context, arg UpsertPullRequestParams) error {
	_, err := q.db.Exec(ctx, upsertPullRequest,
		arg.ID,
		arg.Title,
		arg.State,
		arg.Url,
		arg.MergedAt,
		arg.CreatedAt,
		arg.Additions,
		arg.Deletions,
		arg.BranchName,
		arg.Author,
		arg.RepositoryName,
		arg.RepositoryOwner,
		arg.ReviewRequestedAt,
		arg.ReviewsRequested,
	)
	return err
}

const upsertPullRequestReview = `-- name: UpsertPullRequestReview :exec

INSERT INTO pull_request_reviews (
    id, pull_request_id, author_login, state, body, url, submitted_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) ON CONFLICT (id)
DO UPDATE SET
    state = EXCLUDED.state,
    body = EXCLUDED.body,
    submitted_at = EXCLUDED.submitted_at,
    updated_at = CURRENT_TIMESTAMP
`

type UpsertPullRequestReviewParams struct {
	ID            string             `db:"id"`
	PullRequestID string             `db:"pull_request_id"`
	AuthorLogin   sql.NullString     `db:"author_login"`
	State         pgtype.Text        `db:"state"`
	Body          sql.NullString     `db:"body"`
	Url           sql.NullString     `db:"url"`
	SubmittedAt   pgtype.Timestamptz `db:"submitted_at"`
}

// Pull Request Reviews --
func (q *Queries) UpsertPullRequestReview(ctx context.Context, arg UpsertPullRequestReviewParams) error {
	_, err := q.db.Exec(ctx, upsertPullRequestReview,
		arg.ID,
		arg.PullRequestID,
		arg.AuthorLogin,
		arg.State,
		arg.Body,
		arg.Url,
		arg.SubmittedAt,
	)
	return err
}
