package layout

import "strings"
import "golang.org/x/text/cases"
import "golang.org/x/text/language"

templ Base() {
	<!DOCTYPE html>
	<html lang="en" data-theme="dracula">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Dora Matic - DORA metrics for you ;)</title>
			<!-- Tailwind CSS -->
			<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
			<!-- Font Awesome -->
			<link
				rel="stylesheet"
				href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
				integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
				crossorigin="anonymous"
				referrerpolicy="no-referrer"
			/>
			<link href="https://cdn.jsdelivr.net/npm/daisyui@4.11.1/dist/full.min.css" rel="stylesheet" type="text/css"/>
			<script src="https://cdn.tailwindcss.com"></script>
			<!-- HTMX -->
			<script src="https://unpkg.com/htmx.org@1.9.12"></script>
			<style>
    .spinner {
      display: none;
    }

    .htmx-request .spinner {
      display: inline;
    }

    .htmx-request.spinner {
      display: inline;
    }

    .htmx-request.spinner~.button-text {
      display: none;
    }
  </style>
		</head>
		<body class="min-h-screen flex flex-col bg-base-100">
			<div class="drawer" style="z-index: 1000;">
				<input id="my-drawer" type="checkbox" class="drawer-toggle"/>
				<div class="drawer-content">
					<div class="navbar bg-base-100">
						<div class="flex-none">
							<label for="my-drawer" class="cursor-pointer px-3">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									fill="none"
									viewBox="0 0 24 24"
									class="inline-block w-5 h-5 stroke-current"
								>
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
								</svg>
							</label>
						</div>
						<div class="flex-1">
							<a class="btn btn-ghost text-xl">{ makeHeader(ctx.Value("activeUrl").(string)) }</a>
						</div>
						<div class="flex-none px-3 py-3">
							<label class="cursor-pointer grid place-items-center">
								<input
									type="checkbox"
									value="acid"
									class="toggle theme-controller bg-base-content row-start-1 col-start-1 col-span-2"
								/>
								<svg
									class="col-start-2 row-start-2 stroke-base-100 fill-base-100"
									xmlns="http://www.w3.org/2000/svg"
									width="14"
									height="14"
									viewBox="0 0 24 24"
									fill="none"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"
								>
									<circle cx="12" cy="12" r="5"></circle>
									<path
										d="M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
									></path>
								</svg>
								<svg
									class="col-start-1 row-start-1 stroke-base-100 fill-base-100"
									xmlns="http://www.w3.org/2000/svg"
									width="14"
									height="14"
									viewBox="0 0 24 24"
									fill="none"
									stroke="currentColor"
									stroke-width="2"
									stroke-linecap="round"
									stroke-linejoin="round"
								>
									<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
								</svg>
							</label>
						</div>
					</div>
				</div>
				<div class="drawer-side">
					<label for="my-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
					<ul class="menu p-4 w-80 min-h-full bg-base-200 text-base-content">
						<li>
							@menuItem(ctx.Value("activeUrl").(string), "/", "Dashboard")
						</li>
						<li>
							@menuItem(ctx.Value("activeUrl").(string), "/repository/list", "Repository list")
						</li>
					</ul>
				</div>
			</div>
			<main class="flex-grow p-4">
				{ children... }
			</main>
			<footer class="bg-base-200 p-4 text-center shadow-inner">
				<p>&copy; 2024 DoraMatic v 1.0.0</p>
			</footer>
		</body>
	</html>
}

templ menuItem(activePath string, path, name string) {
	if activePath == path {
		<a class="active" href={ templ.SafeURL(path) }>{ name }</a>
	} else {
		<a href={ templ.SafeURL(path) }>{ name }</a>
	}
}

func makeHeader(p string) string {
	if p == "/" {
		return "Dashboard"
	}

	x := strings.Join(strings.Split(p, "/"), " ")
	return cases.Title(language.English, cases.Compact).String(x)
}
